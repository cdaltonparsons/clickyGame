{"ast":null,"code":"var _jsxFileName = \"/Users/cdp/Desktop/code/homework/clickyGame/clickygame/src/App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\nimport _ from \"lodash\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      currentScore: 0,\n      highScore: 0,\n      clicked: []\n    };\n\n    this.handleShuffle = () => {\n      this.setState({\n        cards: _.shuffle(this.state.cards)\n      });\n    };\n\n    this.handleClick = id => {\n      console.log(\"clicked\");\n\n      if (!this.state.clicked.indexOf[id]) {\n        this.handleIncrement();\n        this.setState({\n          clicked: this.state.clicked.concat(id)\n        });\n        console.log(\"this.clicked\", this.clicked);\n        this.handleShuffle();\n      } else {\n        this.handleShuffle();\n      }\n    };\n\n    this.handleIncrement = () => {\n      const newScore = this.state.currentScore + 1;\n      this.setState({\n        currentScore: newScore\n      });\n\n      if (newScore >= this.state.highScore) {\n        this.setState({\n          highScore: newScore\n        });\n      } else if (newScore === 12) {\n        alert(\"You won! Congratulations!\");\n        this.handleReset();\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        currentScore: 0,\n        highScore: this.state.highScore,\n        clicked: []\n      });\n      this.handleShuffle();\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-dark bg-primary sticky-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Score: \", this.state.currentScore, \" | High Score: \", this.state.topScore)), React.createElement(\"div\", {\n      className: \"jumbotron bg-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"display-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Welcome to the critically acclaimed \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Clicky Game!!\")), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"The rules are simple. Click an image to score a point. Your score will increment each time you click a unique image. Clicking an image you've already clicked on will reset your score. Good Luck!\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.cards.map(card => React.createElement(Card, {\n      className: \"cardImg col-md-3\",\n      key: card.id,\n      name: card.name,\n      image: card.image,\n      id: card.id,\n      handleClick: this.handleClick,\n      handleReset: this.handleReset,\n      handleIncrement: this.handleIncrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cdp/Desktop/code/homework/clickyGame/clickygame/src/App.js"],"names":["React","Component","Card","cards","_","App","state","currentScore","highScore","clicked","handleShuffle","setState","shuffle","handleClick","id","console","log","indexOf","handleIncrement","concat","newScore","alert","handleReset","render","topScore","map","card","name","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAO,WAAP;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AACNH,MAAAA,KADM;AAENI,MAAAA,YAAY,EAAE,CAFR;AAGNC,MAAAA,SAAS,EAAE,CAHL;AAINC,MAAAA,OAAO,EAAE;AAJH,KADkB;;AAAA,SAQ1BC,aAR0B,GAQV,MAAM;AACpB,WAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEC,CAAC,CAACQ,OAAF,CAAU,KAAKN,KAAL,CAAWH,KAArB;AAAT,OAAd;AACD,KAVyB;;AAAA,SAY1BU,WAZ0B,GAYZC,EAAE,IAAI;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,UAAI,CAAC,KAAKV,KAAL,CAAWG,OAAX,CAAmBQ,OAAnB,CAA2BH,EAA3B,CAAL,EAAqC;AACnC,aAAKI,eAAL;AACA,aAAKP,QAAL,CAAc;AAAEF,UAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG,OAAX,CAAmBU,MAAnB,CAA0BL,EAA1B;AAAX,SAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKP,OAAjC;AACA,aAAKC,aAAL;AACD,OALD,MAKO;AACL,aAAKA,aAAL;AACD;AACF,KAtByB;;AAAA,SAwB1BQ,eAxB0B,GAwBR,MAAM;AACtB,YAAME,QAAQ,GAAG,KAAKd,KAAL,CAAWC,YAAX,GAA0B,CAA3C;AACA,WAAKI,QAAL,CAAc;AACZJ,QAAAA,YAAY,EAAEa;AADF,OAAd;;AAGA,UAAIA,QAAQ,IAAI,KAAKd,KAAL,CAAWE,SAA3B,EAAsC;AACpC,aAAKG,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAEY;AAAb,SAAd;AACD,OAFD,MAEO,IAAIA,QAAQ,KAAK,EAAjB,EAAqB;AAC1BC,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAKC,WAAL;AACD;AACF,KAnCyB;;AAAA,SAqC1BA,WArC0B,GAqCZ,MAAM;AAClB,WAAKX,QAAL,CAAc;AACZJ,QAAAA,YAAY,EAAE,CADF;AAEZC,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAFV;AAGZC,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKA,WAAKC,aAAL;AACD,KA5CyB;AAAA;;AA8C1Ba,EAAAA,MAAM,GAAG;AACP,WACE,0CACE;AAAK,MAAA,SAAS,EAAC,2DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKjB,KAAL,CAAWC,YADrB,qBACkD,KAAKD,KAAL,CAAWkB,QAD7D,CADF,CADF,EAME;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADtC,CADF,EAIE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4MAJF,CANF,EAgBE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,KAAL,CAAWH,KAAX,CAAiBsB,GAAjB,CAAqBC,IAAI,IACxB,oBAAC,IAAD;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,GAAG,EAAEA,IAAI,CAACZ,EAFZ;AAGE,MAAA,IAAI,EAAEY,IAAI,CAACC,IAHb;AAIE,MAAA,KAAK,EAAED,IAAI,CAACE,KAJd;AAKE,MAAA,EAAE,EAAEF,IAAI,CAACZ,EALX;AAME,MAAA,WAAW,EAAE,KAAKD,WANpB;AAOE,MAAA,WAAW,EAAE,KAAKS,WAPpB;AAQE,MAAA,eAAe,EAAE,KAAKJ,eARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAhBF,CADF;AAiCD;;AAhFyB;;AAmF5B,eAAeb,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\nimport _ from \"lodash\";\n\nclass App extends Component {\n  state = {\n    cards,\n    currentScore: 0,\n    highScore: 0,\n    clicked: []\n  };\n\n  handleShuffle = () => {\n    this.setState({ cards: _.shuffle(this.state.cards) });\n  };\n\n  handleClick = id => {\n    console.log(\"clicked\");\n    if (!this.state.clicked.indexOf[id]) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n      console.log(\"this.clicked\", this.clicked);\n      this.handleShuffle();\n    } else {\n      this.handleShuffle();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore\n    });\n    if (newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore });\n    } else if (newScore === 12) {\n      alert(\"You won! Congratulations!\");\n      this.handleReset();\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      highScore: this.state.highScore,\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  render() {\n    return (\n      <>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary sticky-top\">\n          <p>\n            Score: {this.state.currentScore} | High Score: {this.state.topScore}\n          </p>\n        </nav>\n        <div className=\"jumbotron bg-info\">\n          <h1 className=\"display-3\">\n            Welcome to the critically acclaimed <strong>Clicky Game!!</strong>\n          </h1>\n          <p className=\"lead\">\n            The rules are simple. Click an image to score a point. Your score\n            will increment each time you click a unique image. Clicking an image\n            you've already clicked on will reset your score. Good Luck!\n          </p>\n        </div>\n        <div className=\"row\">\n          {this.state.cards.map(card => (\n            <Card\n              className=\"cardImg col-md-3\"\n              key={card.id}\n              name={card.name}\n              image={card.image}\n              id={card.id}\n              handleClick={this.handleClick}\n              handleReset={this.handleReset}\n              handleIncrement={this.handleIncrement}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}